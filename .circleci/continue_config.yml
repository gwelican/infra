version: 2.1

orbs:
  terraform: circleci/terraform@3.2.0

parameters:
  terraform:
    type: boolean
    default: false
  ansible:
    type: boolean
    default: true

commands:
  setup_terraform_credentials:
    steps:
      - run:
          name: setup terraform credentials
          command: |
            mkdir ~/.terraform.d
            echo "{\"credentials\": { \"app.terraform.io\": { \"token\": \"$TERRAFORM_TOKEN\"}}}" > ~/.terraform.d/credentials.tfrc.json
  tfnotify-install:
    parameters:
      tfnotify-url:
        default: https://github.com/mercari/tfnotify/releases/download
        type: string
      tfnotify-version:
        default: v0.7.5
        type: string
    steps:
      - run:
          command: |
            wget << parameters.tfnotify-url >>/<< parameters.tfnotify-version >>/tfnotify_linux_amd64.tar.gz
            mkdir -v tfnotify_linux_amd64
            tar -xzvf tfnotify_linux_amd64.tar.gz -C tfnotify_linux_amd64
            mv -v tfnotify_linux_amd64/tfnotify /usr/local/bin/tfnotify
            rm -vrf tfnotify_linux_amd64*
          name: tfnotify install

executors:
  molecule:
    working_directory: ~/repo
    docker:
      - image: python:3-slim
  ansible:
    working_directory: ~/repo
    docker:
      - image: ansible/ansible:default
  terraform:
    working_directory: ~/repo
    docker:
      - image: hashicorp/terraform:1.3.6

jobs:
  ansible-test:
    parallelism: 2
    machine:
      image: ubuntu-2004:202101-01
    steps:
      - checkout
      - restore_cache:
          key: &deps1-cache pip-{{ .Branch }}-{{ checksum "ansible/requirements.txt" }}
      - run:
          command: |
            python3 -m venv venv
            . venv/bin/activate
            pip install -r requirements.txt
          working_directory: ansible
      - save_cache:
          key: *deps1-cache
          paths:
            - "ansible/venv"
      - run:
          working_directory: ansible
          command: |
            . venv/bin/activate
            echo $(circleci tests glob "molecule/*/molecule.yml" | sed -re's/\/molecule.yml//' | sed -re's/molecule\///')
            TEST=$(circleci tests glob "molecule/*/molecule.yml" | sed -re's/\/molecule.yml//' | sed -re's/molecule\///' | circleci tests split --split-by=timings)
            echo "Running $TEST"
            molecule test -s $TEST

  ansible-playbook:
    executor: ansible
    steps:
      - run:
          command: ansible-playbook -i hosts metrics.yml

  terraform-apply:
    executor: terraform
    steps:
      - restore_cache:
          key: terraform-{{ .Environment.CIRCLE_SHA1 }}
      - setup_terraform_credentials
      - run:
          working_directory: terraform
          name: terraform apply
          command: |
            terraform apply -auto-approve

  terraform-plan:
    executor: terraform
    steps:
      - checkout
      - setup_terraform_credentials
      - tfnotify-install
      - run:
          name: terraform plan and notify
          working_directory: terraform
          command: |
            terraform init
            terraform plan | tfnotify plan --title "## Plan result"
      - save_cache:
          key: terraform-{{ .Environment.CIRCLE_SHA1 }}
          paths:
            - ~/repo

workflows:
  ansible-test:
    when: << pipeline.parameters.ansible >>
    jobs:
      - ansible-test
#  ansible:
#    when: << pipeline.parameters.ansible >>
#    jobs:
#      - ansible-playbook:
#          context: ansible
#        filters:
#          branches:
#            only:
#              - master
  cloudflare:
    when: << pipeline.parameters.terraform >>
    jobs:
      - terraform-plan:
          context: terraform
      - hold-terraform-apply:
          type: approval
          requires:
            - terraform-plan
      - terraform-apply:
         context: terraform
         requires:
           - terraform-plan
           - hold-terraform-apply
         filters:
           branches:
             only:
               - master